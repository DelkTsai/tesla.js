{"name":"Tesla.js","tagline":"MVC Style Framework for Node.js","body":"# Tesla.js (beta)\r\n\r\nTesla.js is a boilerplate [node.js](http://www.nodejs.org/) framework, with some basic MVC features.\r\n\r\n## Prerequisites\r\n* Node.js - Download and Install [Node.js](http://www.nodejs.org/download/). You can also follow [this gist](https://gist.github.com/isaacs/579814) for a quick and easy way to install Node.js and npm\r\n* MongoDB - Download and Install [MongoDB](http://www.mongodb.org/downloads) - Make sure it's running on the default port (27017).\r\n\r\n## Included Packages\r\n#### NPM modules in the [package.json](package.json) file.\r\n* [Express](http://expressjs.com/) - Sinatra inspired web development framework\r\n* [Mongoose](http://mongoosejs.com/) - elegant mongodb object modeling for node.js\r\n* [Passport](http://passportjs.org/) - Simple, unobtrusive authentication for Node.js.\r\n* [Jade](http://jade-lang.com/) - robust, elegant, feature rich template engine for nodejs\r\n* [Stylus](http://learnboost.github.io/stylus/) - Robust, expressive, and feature-rich CSS superset\r\n* [Superagent](https://github.com/visionmedia/superagent) - Elegant & feature rich browser / node HTTP with a fluent API\r\n* [MD5](https://github.com/pvorb/node-md5) - native js function for hashing messages with MD5\r\n\r\n#### Bower modules in the [bower.json](bower.json) file.\r\n* [AngularJS](http://angularjs.org) - HTML enhanced for web apps!\r\n* [Zepto.js](http://zeptojs.com/) - Minimalist JavaScript library for modern browsers, with a jQuery-compatible API\r\n* [jQuery](http://jquery.com/) - jQuery JavaScript Library\r\n\r\n\r\n## Quick Start\r\nThere are 2 ways that you can install tesla:\r\n\r\n### Option 1: Clone The Repo\r\nThe first option to simply clone the repo and use it a barebones boilerplate to start your next project.\r\n\r\n```\r\n$ git clone git@github.com:teslajs/tesla.js.git\r\n```\r\n\r\nThis is the most light-weight option and gives you the most control over how you set your project up.\r\n\r\n\r\n### Option 2: Install the Command Line Tools\r\nTesla.js includes a simple command line tool ([tesla-cli](https://github.com/teslajs/tesla-cli)) to make creating and updating apps as simple as possible. You can install it easily with NPM:\r\n\r\n```\r\n$ npm install -g tesla-cli\r\n```\r\n\r\nOnce Tesla is installed, simply run the following command anytime you want to create a new app:\r\n\r\n```\r\n$ tesla app-name\r\n```\r\n\r\nThe example above will create a new app with the name \"app-name\"\r\n\r\n\r\n### Install Dependencies\r\n\r\nWith either option 1 or option 2, you will need to make sure you have all the correct dependencies installed before you can start the server:\r\n\r\n```\r\n$ npm install\r\n```\r\n\r\n### Start the Server\r\n\r\n##### We recommend using [Grunt](https://github.com/gruntjs/grunt-cli) to start the server:\r\n\r\n```\r\n$ grunt\r\n```\r\n\r\nThis will watch for changes to any of your files and automatically restart then server when necesary.\r\n\r\n##### When not using Grunt, you can use:\r\n\r\n```\r\n$ node server\r\n```\r\n\r\nWith this method you have to manually stop and start the server any time you make changes.\r\n\r\n##### Once the server has started, simply point your browser to:\r\n\r\n```\r\nhttp://localhost:3000\r\n```\r\n\r\n## Configuration\r\nAll configuration is specified in the [config](config/) folder, particularly the [config.js](config/config.js) file and the [env](config/env/) files. Here you will need to specify your application name, database name, and any other settings you would like to customize.\r\n\r\n##### Default config file: [config.js](config/config.js)\r\nMost default settings can be set & updated here:\r\n\r\n```\r\napp.site = {\r\n    name : \"Tesla.js\", // the name of you app\r\n}\r\n\r\napp.config = {\r\n    port : 3000, // port to run the server on\r\n\r\n    prettify : {\r\n        html : true, // whether to pretify html\r\n    },\r\n\r\n    engines : {\r\n        html: \"jade\", // specify view engine - options: jade, ejs, haml, hjs (hogan)\r\n        css: \"stylus\", // specify css processor - options: stylus, sass, less\r\n    },\r\n    root : rootPath,\r\n\r\n    db : {\r\n        url : \"mongodb://localhost/db-name\" // url to database\r\n    },\r\n\r\n    jsonp : true, // allow jsonp requests\r\n    secret : 'MYAPPSECRET',\r\n    protocol : 'http://',\r\n    autoLoad : false, // whether to autoload controllers & models\r\n}\r\n\r\n\r\n\r\n// some default meta setting for head\r\napp.site.meta = {\r\n    description : '',\r\n    keywords : '',\r\n    viewport : 'width=device-width, user-scalable=yes, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0',\r\n    encoding : \"utf-8\"\r\n}\r\n```\r\n\r\n\r\n### Environmental Settings\r\n\r\nTo run with a different environment, just specify NODE_ENV as you call grunt:\r\n\r\n```\r\n$ NODE_ENV=test grunt\r\n```\r\n\r\nIf you are using node instead of grunt, it is very similar:\r\n\r\n```\r\n$ NODE_ENV=test node server\r\n```\r\n\r\n\r\n##### Example config file for \"development\" environment: [config/env/development.js](config/env/development.js)\r\n\r\n```\r\n// global settings\r\napp.site.domain = \"localhost\"; // domain the site is running on\r\napp.site.environment = \"Development\"; // name of environment\r\napp.site.url = app.config.protocol + app.site.domain + ':'  + app.config.port + '/'; // base url\r\n\r\n// directories location to use for dynamic file linking\r\napp.site.dir = {\r\n    css : app.site.url + \"css/\",\r\n    img : app.site.url + \"img/\",\r\n    lib : app.site.url + \"lib/\",\r\n    js : app.site.url + \"js/\"\r\n};\r\n```\r\n\r\n\r\n> NOTE: Running Node.js applications in the __production__ environment enables caching, which is disabled by default in all other environments.\r\n\r\n\r\n\r\n## Models, Controllers & Views, Oh My!\r\n\r\n### Routing\r\nTesla comes with an automatic routing system which saves you the trouble of manually creating routes for your site. The routing is based on the following URI structure:\r\n\r\n```\r\nhttp://localhost:3000/controller/action\r\n```\r\n\r\nAs an example, http://localhost:3000/home would load the following controller: app/controllers/home.js\r\n\r\nSimilarly, http://localhost:3000/foo/bar would load this controller: app/controllers/foo/bar.js\r\n\r\n\r\n##### Autoloading\r\nThe exeption to this rule is if you set \"autoLoad: true\" in [config/config.js](config/config.js). In this case you only need to create a model and a view, as Tesla will attempt to automatically load the model and the view using the [app/controllers/auto.js](app/controllers/auto.js) controller.\r\n\r\nWith autoload, going to [http://localhost:3333/hello/world](http://localhost:3000/hello/world) will attempt to load the following files:\r\n\r\n*Controller: app/controllers/auto.js\r\n*Model: app/models/hello.js\r\n*View: app/views/hello/world.jade\r\n\r\nAutoload assumes a model with the name of the controller, and will try to find a record whose \"name\" field matches the action. Using [http://localhost:3000/articles/super-awesome-fun-time](http://localhost:3000/article/super-awesome-fun-time) as an example, autoload load use a model called \"articles\" and try to find a record with the name \"super-awesome-fun-time\":\r\n\r\n```\r\narticles.findOne({name: \"super-awesome-fun-time\"})\r\n```\r\n\r\nWith autoloading, any data returned from the model will be sent to the view via the \"data\" variable. If no data is returned we assume the page does not exist and will throw a 404 error. Also worth noting, autoload expects to find a model to provide data to the view. If you forget to create a model with the correct name, you will get a 404 error when loading the page. If you don't want or need a model to provide data to your controller, or want to use a different URI structure, don't use autoload.\r\n\r\n\r\n\r\n### Controllers\r\nIf you are not using autoload, you will need to create your own controllers, which couldn't be easier! For example, if you want to create the page http://localhost:3000/help, simply create a controller with the same name: app/controllers/help.\r\n\r\nThen, add the following code:\r\n\r\n```\r\nexports.render = function(app) {\r\n\r\n    app.res.render('help', {\r\n        site: app.site\r\n    });\r\n\r\n};\r\n```\r\n\r\nThe above code is pretty simple, it simply loads the view \"app/views/help.jade\" and passes it a \"site\" variable.\r\n\r\nFor a slightly for complex example, lets say you want to create a blog with the following uri structure: http://localhost:3000/article/read?id=12345\r\n\r\nLet's assume also you also want use an \"article\" model to load an article with the id \"12345\". Create the file \"app/controllers/article/read.js\" with the following code:\r\n\r\n```\r\nvar mongoose = require('mongoose'),\r\n    Articles = mongoose.model( 'Article' ),\r\n\r\nexports.render = function(app) {\r\n\r\n    var id = req.query('id')\r\n\r\n    Articles.findOne({_id: ud}).exec(function(err, article) {\r\n\r\n        // IF WE GET AN ERROR\r\n        if (err) {\r\n            app.res.render('error', {\r\n                status: 500\r\n            });\r\n\r\n        // IF NO DATA WAS RETURNED, THROW A 404\r\n        } else if ( article === null) {\r\n            app.res.status(404).render('404', {\r\n                pageTitle : app.site.name + ' - Not Found',\r\n                url: app.req.originalUrl,\r\n                error: 'Not found',\r\n                site: app.site\r\n            });\r\n\r\n        // IF NO PROBLEMS, RENDER PAGE\r\n        } else {\r\n\r\n            // LOAD THE ARTICLE/READ VIEW & PASS DATA FROM THE MODEL\r\n            app.res.render('article/read', {\r\n                article : article,\r\n                site: app.site\r\n            });\r\n\r\n        }\r\n\r\n        }\r\n\r\n    });\r\n\r\n};\r\n```\r\n\r\n### Views\r\n\r\nViews can use Jade (default), Haml, Handlebars or EJS. See the appropriate documentation for you chosen templating language for more info on how to use it.\r\n\r\n\r\n### Models\r\n\r\nFor models, Tesla uses [Mongoose](http://mongoosejs.com/) to connect to a MongoDB server. Documentation on working with Mongoos can be found here: [http://mongoosejs.com/docs/guide.html](http://mongoosejs.com/docs/guide.html)\r\n\r\n\r\n\r\n\r\n## Troubleshooting\r\nDuring install some of you may encounter some issues, most of this issues can be solved by one of the following tips.\r\nIf you went through all this and still can't solve the issue, feel free to contact me(Amos), via the repository issue tracker or the links provided below.\r\n\r\n#### Update NPM, Bower or Grunt\r\nSometimes you may find there is a weird error during install like npm's *Error: ENOENT*, usually updating those tools to the latest version solves the issue.\r\n\r\nUpdating NPM:\r\n```\r\n$ npm update -g npm\r\n```\r\n\r\nUpdating Grunt:\r\n```\r\n$ npm update -g grunt-cli\r\n```\r\n\r\nUpdating Bower:\r\n```\r\n$ npm update -g bower\r\n```\r\n\r\n#### Cleaning NPM and Bower cache\r\nNPM and Bower has a caching system for holding packages that you already installed.\r\nWe found that often cleaning the cache solves some troubles this system creates.\r\n\r\nNPM Clean Cache:\r\n```\r\n$ npm cache clean\r\n```\r\n\r\nBower Clean Cache:\r\n```\r\n$ bower cache clean\r\n```\r\n\r\n\r\n## Heroku Quick Deployment\r\nBefore you start make sure you have <a href=\"https://toolbelt.heroku.com/\">heroku toolbelt</a> installed and an accessible mongo db instance - you can try <a href=\"http://www.mongohq.com/\">mongohq</a> which have an easy setup )\r\n\r\n```bash\r\ngit init\r\ngit add .\r\ngit commit -m \"initial version\"\r\nheroku apps:create\r\ngit push heroku master\r\n```\r\n\r\n## Credits\r\nInspired by the [MEAN Stack](https://github.com/linnovate/mean) by [Amos Haviv](https://twitter.com/amoshaviv) and [Express](https://github.com/visionmedia/express) by [TJ Holowaychuk](https://github.com/visionmedia)\r\n","google":"UA-46283194-1","note":"Don't delete this file! It's used internally to help with page regeneration."}