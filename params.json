{"name":"Tesla.js","tagline":"MVC Style Framework for Node.js","body":"# Tesla.js\r\n\r\nTesla.js is a boilerplate [node.js](http://www.nodejs.org/) framework, with some basic MVC features.\r\n\r\n## Prerequisites\r\n* Node.js - Download and Install [Node.js](http://www.nodejs.org/download/). You can also follow [this gist](https://gist.github.com/isaacs/579814) for a quick and easy way to install Node.js and npm\r\n* MongoDB - Download and Install [MongoDB](http://www.mongodb.org/downloads) - Make sure it's running on the default port (27017).\r\n\r\n## Quick Start\r\nThere are 2 ways that you can install tesla:\r\n\r\n### Option 1: Clone The Repo\r\nThe first option to simply clone the repo and use it a barebones boilerplate to start your next project.\r\n\r\n```\r\n$ git clone git@github.com:teslajs/tesla.js.git\r\n```\r\n\r\nThis is the most light-weight option and gives you the most control over how you set your project up.\r\n\r\n\r\n### Option 2: Install the Command Line Tools\r\nTesla.js includes a simple command line tool ([tesla-cli](https://github.com/teslajs/tesla-cli)) to make creating and updating apps as simple as possible. You can install it easily with NPM:\r\n\r\n```\r\n$ npm install -g tesla-cli\r\n```\r\n\r\nOnce Tesla is installed, simply run the following command anytime you want to create a new app:\r\n\r\n```\r\n$ tesla app-name\r\n```\r\n\r\nThe example above will create a new app with the name \"app-name\"\r\n\r\n\r\n### Install Dependencies\r\n\r\nWith either option 1 or option 2, you will need to make sure you have all the correct dependencies installed before you can start the server:\r\n\r\n```\r\n$ npm install\r\n```\r\n\r\n### Start the Server\r\n\r\n##### We recommend using [Grunt](https://github.com/gruntjs/grunt-cli) to start the server:\r\n\r\n```\r\n$ grunt\r\n```\r\n\r\nThis will watch for changes to any of your files and automatically restart then server when necesary.\r\n\r\n##### When not using Grunt, you can use:\r\n\r\n```\r\n$ node server\r\n```\r\n\r\nWith this method you have to manually stop and start the server any time you make changes.\r\n\r\n##### Once the server has started, simply point your browser to:\r\n\r\n```\r\nhttp://localhost:3000\r\n```\r\n\r\n## Configuration\r\nAll configuration is specified in the [config](config/) folder, particularly the [config.js](config/config.js) file and the [env](config/env/) files. Here you will need to specify your application name, database name, and any other settings you would like to customize.\r\n\r\n##### Default config file: [config.js](config/config.js)\r\nMost default settings can be set & updated here:\r\n\r\n```\r\napp.site = {\r\n    name : \"Tesla.js\", // the name of you app\r\n}\r\n\r\napp.config = {\r\n    port : 3000, // port to run the server on\r\n\r\n    prettify : {\r\n        html : true, // whether to pretify html\r\n    },\r\n\r\n    engines : {\r\n        html: \"jade\", // jade, ejs, haml, hjs (hogan)\r\n        css: \"stylus\", // styles, sass, less\r\n    },\r\n    root : rootPath,\r\n\r\n    db : {\r\n        url : \"mongodb://localhost/db-name\" // url to database\r\n    },\r\n\r\n    jsonp : true, // allow jsonp requests\r\n    secret : 'MYAPPSECRET',\r\n    protocol : 'http://',\r\n    autoLoad : false, // whether to autoload controllers & models\r\n}\r\n\r\n\r\n\r\n// some default meta setting for head\r\napp.site.meta = {\r\n    description : '',\r\n    keywords : '',\r\n    viewport : 'width=device-width, user-scalable=yes, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0',\r\n    encoding : \"utf-8\"\r\n}\r\n```\r\n\r\n\r\n### Environmental Settings\r\n\r\nTo run with a different environment, just specify NODE_ENV as you call grunt:\r\n\r\n```\r\n$ NODE_ENV=test grunt\r\n```\r\n\r\nIf you are using node instead of grunt, it is very similar:\r\n\r\n```\r\n$ NODE_ENV=test node server\r\n```\r\n\r\n\r\n##### Example config file for \"development\" environment: [config/env/development.js](config/env/development.js)\r\n\r\n```\r\n// global settings\r\napp.site.domain = \"localhost\"; // domain the site is running on\r\napp.site.environment = \"Development\"; // name of environment\r\napp.site.url = app.config.protocol + app.site.domain + ':'  + app.config.port + '/'; // base url\r\n\r\n// directories location to use for dynamic file linking\r\napp.site.dir = {\r\n    css : app.site.url + \"css/\",\r\n    img : app.site.url + \"img/\",\r\n    lib : app.site.url + \"lib/\",\r\n    js : app.site.url + \"js/\"\r\n};\r\n```\r\n\r\n\r\n> NOTE: Running Node.js applications in the __production__ environment enables caching, which is disabled by default in all other environments.\r\n\r\n\r\n\r\n\r\n## Included Packages\r\n#### NPM modules in the [package.json](package.json) file.\r\n* [Express](http://expressjs.com/) - Sinatra inspired web development framework\r\n* [Mongoose](http://mongoosejs.com/) - elegant mongodb object modeling for node.js\r\n* [Passport](http://passportjs.org/) - Simple, unobtrusive authentication for Node.js.\r\n* [Jade](http://jade-lang.com/) - robust, elegant, feature rich template engine for nodejs\r\n* [Stylus](http://learnboost.github.io/stylus/) - Robust, expressive, and feature-rich CSS superset\r\n* [Superagent](https://github.com/visionmedia/superagent) - Elegant & feature rich browser / node HTTP with a fluent API\r\n* [MD5](https://github.com/pvorb/node-md5) - native js function for hashing messages with MD5\r\n\r\n#### Bower modules in the [bower.json](bower.json) file.\r\n* [AngularJS](http://angularjs.org) - HTML enhanced for web apps!\r\n* [Zepto.js](http://zeptojs.com/) - Minimalist JavaScript library for modern browsers, with a jQuery-compatible API\r\n* [jQuery](http://jquery.com/) - jQuery JavaScript Library\r\n\r\n\r\n\r\n## Troubleshooting\r\nDuring install some of you may encounter some issues, most of this issues can be solved by one of the following tips.\r\nIf you went through all this and still can't solve the issue, feel free to contact me(Amos), via the repository issue tracker or the links provided below.\r\n\r\n#### Update NPM, Bower or Grunt\r\nSometimes you may find there is a weird error during install like npm's *Error: ENOENT*, usually updating those tools to the latest version solves the issue.\r\n\r\nUpdating NPM:\r\n```\r\n$ npm update -g npm\r\n```\r\n\r\nUpdating Grunt:\r\n```\r\n$ npm update -g grunt-cli\r\n```\r\n\r\nUpdating Bower:\r\n```\r\n$ npm update -g bower\r\n```\r\n\r\n#### Cleaning NPM and Bower cache\r\nNPM and Bower has a caching system for holding packages that you already installed.\r\nWe found that often cleaning the cache solves some troubles this system creates.\r\n\r\nNPM Clean Cache:\r\n```\r\n$ npm cache clean\r\n```\r\n\r\nBower Clean Cache:\r\n```\r\n$ bower cache clean\r\n```\r\n\r\n\r\n## Heroku Quick Deployment\r\nBefore you start make sure you have <a href=\"https://toolbelt.heroku.com/\">heroku toolbelt</a> installed and an accessible mongo db instance - you can try <a href=\"http://www.mongohq.com/\">mongohq</a> which have an easy setup )\r\n\r\n```bash\r\ngit init\r\ngit add .\r\ngit commit -m \"initial version\"\r\nheroku apps:create\r\ngit push heroku master\r\n```\r\n\r\n## Credits\r\nInspired by the [MEAN Stack](https://github.com/linnovate/mean) by [Amos Haviv](https://twitter.com/amoshaviv) and [Express](https://github.com/visionmedia/express) by [TJ Holowaychuk](https://github.com/visionmedia)\r\n","google":"UA-46283194-1","note":"Don't delete this file! It's used internally to help with page regeneration."}